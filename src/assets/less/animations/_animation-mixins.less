/* Animations core
* AnimDelayLevel: the animations will be delayed by level.
* @params:
*   Level:
*     Higher level means slower
*     Default level is 0 (as 1s delayed)
*     Level = -5 as no delay
*   Now:
*     The effect delay used for current selector or not
*     Default is false, means delaying affects selector when it's actived via class [.active]
*/
.animDelayLevel(@level: 0, @now: false, @class: active) {
  @extraDelay: 200ms * @level;
  & when (@now = true) {
    .animation-delay(1000ms + @extraDelay);
  }
  .@{class}& {
    .animation-delay(1000ms + @extraDelay);
  }
}

.animSetup {
  .animation-duration(@animateSpeed*2);
  .animation-fill-mode(both);
  .animation-timing-function(cubic-bezier(.27, .35, .23, .96););
  .animation-delay(0ms);
  .animDelayLevel();
}

.animCore() {
  &:extend(.animSetup all);
}

.animClear() {
  .animation(none) !important;
  .transition(none) !important;
}
/* Effects block
* How to:
* Call the effect name with parent [active] class as param
* Ex:
* .class-name {.fadeIn(actived)}
* So the [div.class-name] will fade in when its parent has class [.actived]
* Default parent active class is [.active]
*/
.fadeIn(@class: active) {
  .animCore();
  .animation-name(fadeOut);
  .@{class}& {
    .animation-name(fadeIn);
  }
}

.fadeUp(@class: active) {
  .animCore();
  .animation-name(fadeOutUp);
  .@{class}& {
    .animation-name(fadeInUp);
  }
}

.fadeDown(@class: active) {
  .animCore();
  .animation-name(fadeOutDown);
  .@{class}& {
    .animation-name(fadeInDown);
  }
}

.fadeLeft(@class: active) {
  .animCore();
  .animation-name(fadeOutLeft);
  .@{class}& {
    .animation-name(fadeInLeft);
  }
}

.fadeRight(@class: active) {
  .animCore();
  .animation-name(fadeOutRight);
  .@{class}& {
    .animation-name(fadeInRight);
  }
}

.zoomIn(@class: active) {
  .animCore();
  .animation-name(zoomOut);
  .@{class}& {
    .animation-name(zoomIn);
  }
}

.slideInLeft(@class: active) {
  .animCore();
  .animation-name(slideOutLeft);
  .@{class}& {
    .animation-name(slideInLeft);
  }
}
